Selenium Grid


Selenium Grid allows the execution of WebDriver scripts on remote machines (virtual or real) by routing commands sent by the client to remote browser instances. It aims to provide an easy way to run tests in parallel on multiple machines.
Selenium Grid allows us to run tests in parallel on multiple machines, and to manage different browser versions and browser configurations centrally (instead of in each individual test).

Selenium Grid is a part of the Selenium Suite that specializes in running multiple tests across different browsers, operating systems, and machines in parallel. It is achieved by routing the commands of remote browser instances where a server acts as a hub. A user needs to configure the remote server in order to execute the tests.

￼

Purposes and main functionalities
* Central entry point for all tests
* Management and control of the nodes / environment where the browsers run
* Scaling
* Running tests in parallel
* Cross platform testing
* Load balancing


￼

Hub

* Intermediary and manager
* Accepts requests to run tests
* Takes instructions from client and executes them remotely on the nodes
* Manages threads
A Hub is a central point where all your tests are sent. Each Selenium Grid consists of exactly one hub. The hub needs to be reachable from the respective clients (i.e. CI server, Developer machine etc.) The hub will connect one or more nodes that tests will be delegated to.
Nodes

* Where the browsers live
* Registers itself to the hub and communicates its capabilities
* Receives requests from the hub and executes them
Nodes are different Selenium instances that will execute tests on individual computer systems. There can be many nodes in a grid. The machines which are nodes do not need to be the same platform or have the same browser selection as that of the hub or the other nodes. A node on Windows might have the capability of offering Internet Explorer as a browser option, whereas this wouldn’t be possible on Linux or Mac.


Setup
The selenium-server-standalone package includes the hub
selenium-server-standalone.jar from https://selenium.dev/downloads/.

Step-1 
Start the Hub
java -jar selenium-server-standalone-2.30.0.jar -role hub

Step2
to verify whether the hub is running is by using a browser.
Go to http://localhost:4444/grid/console
Since Machine A's IP address is 192.168.1.3, then on the browser on Machine B you should type http://192.168.1.3:4444/grid/console

Step-3
In ubuntu —> go to settings —> wifi —> ip
Or
￼

Running the Node 
java -Dwebdriver.gecko.driver="C:\geckodriver.exe" -jar selenium-server-standalone-3.4.0.jar -role webdriver -hub http://192.168.1.3:4444/grid/register -port 5566

￼

￼

￼

SAMPLE CODE
package com.brainmentors.keyworddriven.keyworddriven;

import java.net.URL;

import org.openqa.selenium.By;
import org.openqa.selenium.Platform;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.brainmentors.keyworddriven.keyworddriven.utils.Constants;
import com.brainmentors.keyworddriven.keyworddriven.utils.PropertyReader;

public class AppTest{
	@Test
	public void test1() {
		//System.setProperty(PropertyReader.getValue(Constants.DRIVER_NAME), PropertyReader.getValue(Constants.DRIVER_PATH));
		DesiredCapabilities d = DesiredCapabilities.chrome();
		ChromeOptions c = new ChromeOptions();
		c.setHeadless(true);
		d.setCapability(ChromeOptions.CAPABILITY, c);
		d.setBrowserName("chrome");
		//d.setVersion("83");
		d.setPlatform(Platform.LINUX);
		//ChromeOptions co = new ChromeOptions();
		
		try {
			WebDriver driver = new RemoteWebDriver(new URL("http://192.168.1.8:5566/wd/hub"),d);
			driver.get("http://202.54.216.12:1000/companion/LoginPage.aspx");
			WebElement userTxt = driver.findElement(By.id("username"));
			userTxt.sendKeys("companion");
			WebElement passwordTxt = driver.findElement(By.id("Password"));
			String type = passwordTxt.getAttribute("type");
			Assert.assertEquals(type ,"password");
			passwordTxt.sendKeys("companion");
			WebElement codeTxt = driver.findElement(By.id("TxtImgVer"));
			codeTxt.sendKeys("11");
			WebElement loginBt = driver.findElement(By.id("login_Click"));
			loginBt.click();
			Thread.sleep(5000);
			driver.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}

